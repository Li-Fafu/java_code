Index: src/ListNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ListNode.java b/src/ListNode.java
new file mode 100644
--- /dev/null	(date 1733187733251)
+++ b/src/ListNode.java	(date 1733187733251)
@@ -0,0 +1,81 @@
+/**
+ *给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
+ *
+ * 请你将两个数相加，并以相同形式返回一个表示和的链表。
+ *
+ * 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。
+ */
+//Definition for singly-linked list.
+public class ListNode {
+    int val;
+    ListNode next;
+
+
+    ListNode() {
+
+    }
+    ListNode(int val) {
+        this.val = val;
+    }
+    ListNode(int val, ListNode next) {
+        this.val = val;
+        this.next = next;
+    }
+}
+
+class Solution {
+    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
+        if (l1 == null) return l2;
+        if (l2 == null) return l1;
+        ListNode newHead = new ListNode();
+        ListNode cur = newHead;
+        int flag = 0;
+        while (l1 != null && l2 != null) {
+            int k = l1.val + l2.val + flag;
+            if (k > 9) {
+                flag = 1;
+            }else{
+                flag = 0;
+            }
+            ListNode temp = new ListNode(k%10);
+            cur.next = temp;
+            cur = cur.next;
+            l1 = l1.next;
+            l2 = l2.next;
+        }
+        if(l1 == null){
+            while(l2 != null){
+                int k = l2.val + flag;
+                if (k > 9) {
+                    flag = 1;
+                }else{
+                    flag = 0;
+                }
+                ListNode temp = new ListNode(k%10);
+                cur.next = temp;
+                l2 = l2.next;
+                cur = cur.next;
+            }
+
+        }
+        if(l2 == null){
+            while(l1 != null){
+                int k = l1.val + flag;
+                if (k> 9) {
+                    flag = 1;
+                }else{
+                    flag = 0;
+                }
+                ListNode temp = new ListNode(k%10);
+                cur.next = temp;
+                l1 = l1.next;
+                cur = cur.next;
+            }
+        }
+        if (flag == 1) {
+            ListNode temp = new ListNode(1);
+            cur.next = temp;
+        }
+        return newHead.next;
+    }
+}
\ No newline at end of file
